// Generated by CoffeeScript 1.3.3
(function() {
  var Comment, Ruleset, Stylesheet, css;

  css = require('../lib/css');

  Stylesheet = css.Stylesheet;

  Ruleset = css.Ruleset;

  Comment = css.Comment;

  describe("CSS.smash()", function() {
    it("should remove single line comments from a CSS file", function() {
      var raw, smashed;
      raw = "/* Comment */\nb{color:black;}";
      smashed = "b{color:black;}";
      return expect(css.smash(raw)).toEqual(smashed);
    });
    it("should remove multi-line comments from a CSS file", function() {
      var raw, smashed;
      raw = "/* Comment 1\nComment 2\nComment 3*/b{color:black;}";
      smashed = "b{color:black;}";
      return expect(css.smash(raw)).toEqual(smashed);
    });
    it("shouldn't greedily match content between comments", function() {
      var raw, smashed;
      raw = "/* Comment 1 */\nb{color:black;}\n/* Comment 2 */";
      smashed = "b{color:black;}";
      return expect(css.smash(raw)).toEqual(smashed);
    });
    it("shouldn't be confused by comments where the closing asterix is escaped", function() {
      var raw, smashed;
      raw = "/* Start comment \\*/b.opera_style{color:black;}\n/* end comment */";
      smashed = "";
      return expect(css.smash(raw)).toEqual(smashed);
    });
    it("should remove extra lines breaks", function() {
      var raw, smashed;
      raw = "p { font-color: red; }\n\n\nh1 { text-decoration: none; }\n\n.my-class { position: absolute: left: 0; }";
      smashed = "p { font-color: red; } h1 { text-decoration: none; } .my-class { position: absolute: left: 0; }";
      return expect(css.smash(raw)).toEqual(smashed);
    });
    return it("should remove extra spaces", function() {
      var raw, smashed;
      raw = "p              {       background:      blue;       }";
      smashed = "p { background: blue; }";
      return expect(css.smash(raw)).toEqual(smashed);
    });
  });

  describe("CSS.parse()", function() {
    it("should parse a ruleset", function() {
      var raw, stylesheet;
      raw = "p { text:black; }";
      stylesheet = new Stylesheet;
      stylesheet.addLine(new Ruleset(["p"], ["text:black;"]));
      return expect(css.parse(raw).lines).toEqual(stylesheet.lines);
    });
    it("should parse rulesets with extra whitespace in declerations", function() {
      var raw, stylesheet;
      raw = "p { text : black; }";
      stylesheet = new Stylesheet;
      stylesheet.addLine(new Ruleset(["p"], ["text:black;"]));
      return expect(css.parse(raw).lines).toEqual(stylesheet.lines);
    });
    it("should parse rulesets without a semi-colon after the decleration", function() {
      var raw, stylesheet;
      raw = "p { text : black }";
      stylesheet = new Stylesheet;
      stylesheet.addLine(new Ruleset(["p"], ["text:black;"]));
      return expect(css.parse(raw).lines).toEqual(stylesheet.lines);
    });
    it("should parse a ruleset with multiple declerations", function() {
      var raw, stylesheet;
      raw = "p { text:black; align:center; }";
      stylesheet = new Stylesheet;
      stylesheet.addLine(new Ruleset(["p"], ["text:black;", "align:center;"]));
      return expect(css.parse(raw).lines).toEqual(stylesheet.lines);
    });
    it("should parse a ruleset with a multivalue decleration", function() {
      var raw, stylesheet;
      raw = "h1 { font-family: awesome, arial, sans-serif; }";
      stylesheet = new Stylesheet;
      stylesheet.addLine(new Ruleset(["h1"], ["font-family:awesome,arial,sans-serif;"]));
      return expect(css.parse(raw).lines).toEqual(stylesheet.lines);
    });
    it("should parse a ruleset with multiple selectors", function() {
      var raw, stylesheet;
      raw = "h1, h2, h3 { font-family: awesome; }";
      stylesheet = new Stylesheet;
      stylesheet.addLine(new Ruleset(["h1", "h2", "h3"], ["font-family:awesome;"]));
      return expect(css.parse(raw).lines).toEqual(stylesheet.lines);
    });
    it("should parse a ruleset with a class selector", function() {
      var raw, stylesheet;
      raw = ".class { test: val; }";
      stylesheet = new Stylesheet;
      stylesheet.addLine(new Ruleset([".class"], ["test:val;"]));
      return expect(css.parse(raw).lines).toEqual(stylesheet.lines);
    });
    it("should parse a ruleset with an id selector", function() {
      var raw, stylesheet;
      raw = "#myid { dec: val; }";
      stylesheet = new Stylesheet;
      stylesheet.addLine(new Ruleset(["#myid"], ["dec:val;"]));
      return expect(css.parse(raw).lines).toEqual(stylesheet.lines);
    });
    it("should parse a ruleset with combined selector", function() {
      var raw, stylesheet;
      raw = "a.myclass { test: val; }";
      stylesheet = new Stylesheet;
      stylesheet.addLine(new Ruleset(["a.myclass"], ["test:val;"]));
      return expect(css.parse(raw).lines).toEqual(stylesheet.lines);
    });
    it("should parse a ruleset with a class name containing all possible characters", function() {
      var raw, stylesheet;
      raw = ".abcdefghijklmnopqrstuvwyxzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_- { test: val; }";
      stylesheet = new Stylesheet;
      stylesheet.addLine(new Ruleset([".abcdefghijklmnopqrstuvwyxzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-"], ["test:val;"]));
      return expect(css.parse(raw).lines).toEqual(stylesheet.lines);
    });
    it("should parse a ruleset with an id name containing all possible characters", function() {
      var raw, stylesheet;
      raw = "#abcdefghijklmnopqrstuvwyxzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_- { test: val; }";
      stylesheet = new Stylesheet;
      stylesheet.addLine(new Ruleset(["#abcdefghijklmnopqrstuvwyxzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-"], ["test:val;"]));
      return expect(css.parse(raw).lines).toEqual(stylesheet.lines);
    });
    it("should parse a ruleset with an ancestor selector", function() {
      var raw, stylesheet;
      raw = "header h1 { font-weight: bold; }";
      stylesheet = new Stylesheet;
      stylesheet.addLine(new Ruleset(["header h1"], ["font-weight:bold;"]));
      return expect(css.parse(raw).lines).toEqual(stylesheet.lines);
    });
    it("should parse a comment", function() {
      var raw, stylesheet;
      raw = "/* Blah */";
      stylesheet = new Stylesheet;
      stylesheet.addLine(new Comment("/* Blah */"));
      return expect(css.parse(raw).lines).toEqual(stylesheet.lines);
    });
    return it("should parse multiple lines", function() {
      var raw, stylesheet;
      raw = "/* Test */\nb { color:blue; }";
      stylesheet = new Stylesheet;
      stylesheet.addLine(new Comment("/* Test */"));
      stylesheet.addLine(new Ruleset(["b"], ["color:blue;"]));
      return expect(css.parse(raw).lines).toEqual(stylesheet.lines);
    });
  });

}).call(this);
